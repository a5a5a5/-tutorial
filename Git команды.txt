Прописываем в консоли свои данные и настройки переносов строк:
git config --global user.name "ваше имя"
git config --global user.email "ваша почта"
git config --global push.default matching

Кроме того, для пользователей Unix / Mac:

git config - global core.autocrlf input
git config --global core.safecrlf true

Для пользователей Windows:

git config --global core.autocrlf true
git config --global core.safecrlf true

Создать страницу и каталог(папку)
mkdir "Название каталога(Напирмер: CSS)"; cd "Название каталога"; touch "Название файла"

Залить на GitHub 
git remote add origin https://github.com/a5a5a5/-tutorial.git (Изменяется "a5a5a5/-tutorial.git")
git push -u origin master

Один из методов скачивания/клонирования репозитория
git clone "URL адрес"

Сляиние двух документов:
git branch (название нового проекта) -v(краткий список веток)
git checkout (файл на который переключаемся)

Откат изменений до того, пока не индифицирован(закомментирован) файл
git checkout -- "название файла"

Информация ко комментариям
git log
git log --pretty=format:"%h - %an, %ar : %s" (Краткая информация-кто, время, коммунтарий)
git log --since=2.weeks (Информация за 2 недели)
git log -p -2 (показать информацию по 2 коммитам)

Создать новую ветку и перейти в неё:
$ git checkout -b <branch-name>

Удалить локальную ветку:
$ git branch -d <branch-name>

Удалить ветку из удаленного репозитория:
$ git push origin --delete <branch-name>

Добавление удалённого репозитория
$ git remote add origin git@gitsrv:/opt/git/test-project.git

Удаление удалённого репозитория
$ git remote remove origin

Перенести или переименовать файл / каталог:
git mv <source> <destination>

Работа на примере двух веток со слиянием в единую:
Сначала клонируем себе на ПК, затем изменяем, пушим на github, затем качаем на ПК и pull. все готово.

Некотороые команды Git:
add — добавить файл или папку в репозиторий git;
am — применить все патчи из email;
archive — создать архив файлов;
bisect — использовать бинарный поиск для поиска нужного коммита;
branch — управление ветками проекта;
bundle — перемещение объектов и ссылок в архиве;
checkout — переключение между ветками;
cherry-pick — внести изменения в уже существующие коммиты;
clean — удалить все неотслеживаемые файлы и папки проекта;
clone — создать копию удаленного репозитория в папку;
commit — сохранить изменения в репозиторий;
diff — посмотреть изменения между коммитами;
fetch — скачать удаленный репозиторий;
init — создать репозиторий;
merge — объединить две ветви;
pull — интегрировать удаленный репозиторий с локальным;
push — отправить изменения в удаленный репозиторий;
tag — управление тегами;
worktree — управление деревнями разработки.
rm - удаление файла (удал. на локал. затем удаленке, init и ком и push)

Кратий справочник по Git:
http://pontyk.com.ua/zametki/kratkij-spisok-komand-dlya-raboty-s-git/
